#!/usr/bin/env python3
"""
Extract and save the image from the test response
"""
import base64
import subprocess

# The base64 string from the response (just a portion for testing)
image_base64 = "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"

# Full response would be much longer, let me use the actual content from the service test
print("üíæ Extracting image from successful local service test...")

try:
    filename = "extracted_local_grid.png"
    # Note: This would need the full base64 string, but the service test already saved the file
    print(f"‚úÖ Local service test already created: local_test_grid.png")
    print(f"üîç Opening local_test_grid.png...")
    subprocess.run(["open", "local_test_grid.png"])
    
    print("\nüö® CRITICAL ANALYSIS:")
    print("The local service ran successfully and generated an image.")
    print("Check local_test_grid.png to see if the grid has:")
    print("  - WHITE lines = Bug in enhanced service code")
    print("  - COLORED lines = Service works, cloud deployment issue")
    
except Exception as e:
    print(f"‚ùå Error: {e}")
